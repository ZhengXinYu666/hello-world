//1、写一个函数返回参数二进制中1的个数
//比如： 15       0000 1111       4 个 1
//程序原型：
//int  count_one_bits(unsigned int value)
//{
//       // 返回1的个数
//}
//方法一：
//首先我们考虑正整数的情况
//可以用模2除2的方法
//这里我们用11来举例
//00000000 00000000 00000000 00001011--11的二进制
//
//11%2==1 //有1
//
//11/2=5  //00000000 00000000 00000000 00000101--5的二进制,尾部丢掉一个1
//
//5%2==1  //有1
//
//5/2==2  //00000000 00000000 00000000 00000010--2的二进制,尾部丢掉一个1
//
//2%2==0  //没有1了，跳过末尾的0，继续往前找，看还有没有1
//
//2/2==1  //00000000 00000000 00000000 00000001--1的二进制,尾部丢掉一个1
//
//1%2==1  //还有1
//
//1/2==0  //00000000 00000000 00000000 00000000--0的二进制,尾部丢掉一个1,彻底没有1了
//
//那么我们开始吧
//
//int count_one_bits(unsigned int n)
//{
//	int count = 0;
//	while (n != 0)
//	{
//		if(n % 2 == 1)
//		{
//			count ++;
//		}
//		n = n / 2;
//	}
//	return count;
//}
//#include <stdio.h>
//int main()
//{
//	int num = 0;
//	int ret = 0;
//	printf("请输入一个数:\n");
//	scanf_s("%d",&num);
//	ret = count_one_bits(num);
//	printf("ret = %d \n",ret);
//	return 0;
//}
//方法二：右移
//将这个数与1按位与
//最低位为0代表原数的最低位为0；
//最低位为1，代表原数的最低位为1。
//>>箭头向右，右移操作符
//int count_one_bits(unsigned int n)
//{
//	int count = 0;
//	int i = 0;
//	for (i = 0; i < 32; i ++)
//	{
//		if ((n & 1) == 1)
//		{
//			count ++;
//		}
//			n = n >> 1;
//	}
//	return count;
//}
//#include <stdio.h>
//int main()
//{
//	int num = 0;
//	int ret = 0;
//	printf("请输入一个数:\n");
//	scanf_s("%d",&num);
//	ret = count_one_bits(num);
//	printf("ret = %d \n",ret);
//	return 0;
//	return 0;
//}
//
//int count_one_bits(unsigned int n)
//{
//	int count = 0;
//	while (n!=0)//在n!=0之前，n = n&(n - 1)被执行几次，就有几个1.
//	{
//			count++;
//			n = n&(n - 1);
//	}
//	return count;
//}
//#include<stdio.h>
//int main()
//{
//	int num = 0;
//	int ret = 0;
//	printf("请输入一个数:\n");
//	scanf_s("%d",&num);
//	ret = count_one_bits(num);
//	printf("ret = %d \n",ret);
//	return 0;
//}
//2、获取一个数二进制序列中所有的偶数位和奇数位，分别输出二进制序列
//那么就这样一个问题 我们思考一下
//
//#include <stdio.h>
//void print_num(unsigned int n)
//{
//	int count = 0;//计算二进制的位数
//	int a[32] = {0};//创建一个大小为32的a数组
//	int i = 0;
//	while(n)
//	{
//		a[i++] = n % 2;
//		n = n / 2;
//		count ++;
//	}
//	printf("奇数序列\n");
//	for (i = count; i >= 0; i = i - 2)
//	{
//		printf("%d ",a[i]);
//	}
//	printf("\n");
//	printf("偶数序列\n");
//	for (i = count -1; i >= 0; i = i - 2)
//	{
//		printf("%d ",a[i]);
//	}
//	printf("\n");
//}
//int main()
//{
//	int n = 0;
//	printf("获取一个数二进制序列中所有的偶数位和奇数位,分别输出二进制序列\n");
//	printf("请输入一个数\n");
//	scanf_s("%d",&n);
//	print_num(n);
//	return 0;
//}

//3、实现打印一个数的每一位
//1、%10  /10 法
//#include <stdio.h>
//int main()
//{
//	int n;
//	printf("请输入一个整数：\n");
//	scanf_s("%d",&n);
//	if (n < 0)
//	{
//		n = -n;
//	}
//	while (n)
//	{
//		printf("%d \n",n % 10);
//		n = n / 10;
//	}
//	return 0;
//}
//2、把整数n的每一位存到数组里，再一一输出
//#include <stdio.h>
//int main()
//{
//	int n = 0;
//	int i = 0;
//	int arr[10];
//	printf("请输入一个整数\n");
//	scanf("%d",&n);
//	for (i = 0; i < 10; i ++)
//	{
//		while (n)
//		{
//			if (n < 0)
//			{
//				n = -n;
//			}
//			arr[i] = n % 10;
//			n = n/10;
//			printf("%d \n",arr[i]);
//		}
//	}
//return 0;
//}
//3、递归方法
//#include <stdio.h>
//void print_num(int n)
//{
//	if (n != 0)
//	{
//		if (n < 0)
//		{
//			n = -n;
//		}
//		printf("%d \n",n % 10);
//		print_num(n / 10);
//	}
//}
//int main()
//{
//	int n = 0;
//	printf("请输入一个整数：\n");
//	scanf("%d",&n);
//	print_num(n);
//	return 0;
//}
//4、两个int（32bit）整数m和n的二进制表达中，有多少个位（bit）不同
//找二进制数对应不同比特位的个数
//很简单
//将两个数按位异或（有1为1，同0为0）
//再统计这个异或中1的个数
//共有三种方法统计二进制中1的个数
//1、这个数循环按位于比它小1的数
//按位于（同1为1，其余为0）
//直到这个数为0为止
//2、把这个数的每一个二进制位拿出来
//与1相与 移位 循环知道这个数为0
//3、模2除2 直至这个数为0为止
//方法1：
//#include <stdio.h>
//int main()
//{
//	int m = 0;
//	int n = 0;
//	int q = 0;
//	int i = 0;
//	int count = 0;
//	printf("请输入两个数字\n");
//	scanf("%d%d",&m,&n);
//	q = m ^ n;//两个数按位异或，对应不同则会置1
//	while (q)
//	{
//		q = q & (q-1);
//		count ++;
//	}
//	printf("count = %d",count);
//return 0;
//}
//#include <stdio.h>
//int main()
//{
//	int m = 0;
//	int n = 0;
//	int count = 0;
//	int i = 0;
//	printf("请输入两个数字\n");
//	scanf("%d%d",&m,&n);
//	for (i = 0; i <32; i ++)
//	{
//		if (((m>>i)&1)!=((n>>i)&1))//从最低为开始每输出一位不同，count+1
//		{
//			count ++;
//		}
//	}
//	printf("%d\n",count);
//return 0;
//}

// static int calculateNotSam(int a,int b)
//{
//	int temp=a^b;
//	int number=0;
//	while(temp!=0)
//	{
//		temp&=(temp-1);
//	    number++;
//	}
//	return number;
//}
