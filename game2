game.h
#ifndef __GAME_H__
#define __GAME_H__

#define EASY_COUNT 10	//雷的数量
#define R 9		//行
#define C 9		//列

#define ROWS R + 2
#define COLS C + 2

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

void Choose_Menu (int a[ROWS][COLS]);		//选择菜单界面
void Game_Initialize(int a[ROWS][COLS], int row, int col);		//初始化
void Set_Mine(int a[ROWS][COLS], int row, int col, int count);				//布置地雷
void Move_Mine(int a[ROWS][COLS], int row, int col, int x, int y);		//移动地雷 如果第一次输入的就是雷，则将这个雷移到别处 ，游戏继续
void Game_Menu_Print(const int a[ROWS][COLS], int row, int col);		//输出游戏界面
void Game_Result_Print(const int a[ROWS][COLS], int row, int col);		//游戏结束的输出
void Find_Mine(int a[ROWS][COLS], int row, int col);		//进行排雷
void Get_Win(const int a[ROWS][COLS], int row, int col);		//判断游戏状态  还没点开的坐标数
void Get_Mine(int a[ROWS][COLS], int row, int col);		//计算雷的数量
void Play_Game(int a[ROWS][COLS],int row, int col);		//游戏开始调用的主函数

#endif //__GAME_H__


test.c
#include "game.h"
int main()
{
	int arr[ROWS][COLS] = {0};
	Choose_Menu(arr);
	return 0;
}
//整体思路
//定义一个数组
//初始值给个-2
//开始布置地雷  地雷为-1
//输入一个位置  计算这个坐标的雷数
//如果周围雷为00 显示空格 同时向外蔓延开
//当值为-2时 显示*
//如果是0 或者大于0的数字说明已经排过
//如果值为-1 在输出结果时输出@
//如果此处附近有雷  只显示该点的位置 同时显示周围地雷的数量
//每次输入坐标后都检查剩余未被点开的坐标的数量
//如果只剩下雷
//就说明胜利了
//数组大小为显示界面的横纵坐标各+2


game.c
void Move_Mine(int a[ROWS][COLS], int row, int col, int x, int y)
{
	int i = 0;
	int x0 = 0;
	int y0 = 0;
	srand((unsigned int)time(NULL));
	while (i)
	{
		x0 = rand() % row + 1;
		y0 = rand() % col + 1;
		if ((x0 != x || y0 != y) && a[x0][y0] != -1)
		{
			a[x0][y0] = -1;
			break;
		}
	}
}
void Game_Menu_Print(const int a[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	printf("\n\t\t\tGame_Menu:\n\n");//输出坐标
	printf("\t\t\t\t");
	for (i = 1; i <= col; i++)
	{
		if (i < 10)
		{
			printf(" %d ",i);
		}
		else
		{
			printf("%d ", i);
		}
	}
		printf("\n\n");
		//输出棋局
		for (i = 1; i <= row; i++)
		{
			printf("\t\t\t    %d ",i);
			for (j = 1; j <= col; j++)
			{
				if (a[i][j] == -2 || a[i][j] == -1)
				{		
					printf(" * ");
				}
				else if(a[i][j] == 0)
				{
					printf("   ");
				}
				else 
				printf(" %d ", a[i][j]);
			}
			printf("    %d\n", i);
		}
}
//输出坐标
	printf("\n\t\t\t\t");
	for(i = 1;i <= col;i++)
	{
		if (i<10)
		{
			printf(" %d ",i);
		}
		else 
			printf("%d ",i);
	}
	printf("\n\n");
}

int Get_Win(const int a[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	int ret = 0;
	for (i = 1; i <= row; i++)
	{
		for (j = 1; j <= col; j++)
		{
			if(a[i][j] == -2)
				ret ++;
		}	
	}
	return ret;
}

void Get_Mine(int a[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	if ((a[row-1][col-1]==-1)+（a[row-1][col] == -1) + (a[row-1][col+1] == -1)+ (a[row][col-1]==-1) + (a[row][col+1]==-1) + (a[row+1][col-1]==-1)+ (a(a[row+1][col]==-1) + (a[row+1][col+1]==-1) != 0)
	{
		a[row][col]=(a[row-1][col-1]==-1) + a[row-1][col] == -1) + (a[row-1][col+1] == -1)+ (a[row][col-1]==-1) + (a[row][col+1]==-1) + (a[row+1][col-1]==-1)+ (a(a[row+1][col]==-1) + (a[row+1][col+1]==-1) == -1);
	}
	else 
	{
		//仅在棋盘内递归
		if (row >= 1 && row <= R && col >= 1 && col <= col)
		{
			a[row][col]=((a[row-1][col-1]==-1) + a[row-1][col] == -1) + (a[row-1][col+1] == -1)
		+ (a[row][col-1]==-1) + (a[row][col+1]==-1) + (a[row+1][col-1]==-1)
		+ (a(a[row+1][col]==-1) + (a[row+1][col+1]==-1) == -1));
		//向上
		if (a[row-1][col] < 0)
			Get_Mine(a,row-1,col);
		//向右
		if (a[row][col+1] < 0)
			Get_Mine(a, row, col +1)
		//向下
		if(a[row+1][col] < 0)
			Get_Mine(a, row + 1, col);
		//向左
		if(a[row][col-1] < 0)
			Get_Mine(a, row, col - 1);
		}
	}
}

void Find_Mine(int a[ROWS][COLS], int row,int col)
{
	int x = 0;
	int y = 0;
	int win = Get_Win(a, row, col);
	while (win)
	{
		//输入坐标
		Game_Menu_Print(a, row, col);
		printf("请输入坐标：");
		scanf("%d%d", &x,&y);
		//判断有效性
		if (x >= 1 && x <= row && y >= 1 && y <= col)//输入正确
		{
			if (a[x][y] == -1)
			{
				if (win == row * col -EASY_COUNT);
				{
					Move_Mine(a, row, col, x, y);
					Get_Mine(a, row, col);
					win = Get_Win(a, row, col);
				}
				else 
					printf("\n一首凉凉送给你\n\n");
				break;
			}
		}
		else 
		{
			if (a[x][y] != -2)
			{
				printf("你狗怂输入的什么东西\n");
				continue;
			}
			Get_Mine(a, x, y);
			win = Get_Win(a, row, col);
		}

	}
	else 
	{
		printf("输入错误了 妖怪吧\n");
	}
	if(win == 0)
{
printf("\n诶~你是真的骚 你赢了盆友\n\n");
}

}








void Play_Game(int a[ROWS][COLS], int row, int col)
{
	Game_Initialize(a, ROWS, COLS);
	Set_Mine(a, row, col,EASY_COUNT);
	Find_Mine(a, row, col);
	Game_Result_Print(a, row, col);
}
