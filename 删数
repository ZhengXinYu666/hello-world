有一个数组a[N]顺序存放0~N-1，要求每隔两个数删掉一个数，到末尾时循环至开头继续进行，求最后一个被删掉的数的原始下标位置。以8个数(N=7)为例:｛0，1，2，3，4，5，6，7｝，0->1->2(删除)->3->4->5(删除)->6->7->0(删除),如此循环直到最后一个数被删除。

输入描述：
每组数据为一行一个整数n(小于等于1000)，为数组成员数,如果大于1000，则对a[999]进行计算。
输出描述：

一行输出最后一个被删掉的数的原始下标位置。

输入样例：

8
输出结果：

6


import java.util.*;
public class Main{
    public static void main(String[] args){
     	Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
			int input = sc.nextInt();
			int left = input;
			boolean flag[] = new boolean[input];//用来标记是否删除了这个数
			int num = 0;//用来计数
			int result = 0;
			for (int i = 0; i < input; i++) {
				num++;
				if (!flag[i]) {
					if (num % 3 == 0) {
						flag[i] = true;
						left--;
						// System.out.println(i+"    out");
					}
					if (left == 1) {
						break;
					}
				} else {
					num--;
				}
				if (i + 1 == input) {
					i = -1;
				}
			}
			for (int j = 0; j < input; j++) {//找出最后那个数
				if (!flag[j]) {
					result = j;
					break;
				}
			}
			System.out.println(result);
		}	
    }
}

